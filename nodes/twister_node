#!/usr/bin/env python
from hippocampus_common.node import Node
from dynamic_reconfigure.server import Server
from control.cfg import TwisterConfig
import threading
import rospy
from std_msgs.msg import Float64
from geometry_msgs.msg import PoseStamped
import tf.transformations
import math
from hippocampus_msgs.msg import PathFollowerTarget
from mavros_msgs.srv import ParamGet, ParamSet, ParamSetRequest
from mavros_msgs.msg import ParamValue
from enum import Enum, auto

P_GAIN_NAME = "UUV_ROLL_P"
D_GAIN__NAME = "UUV_ROLL_D"


class TwistState(Enum):

    def __repr__(self) -> str:
        return '%s' % self.name

    ARMED = auto()
    OPEN_LOOP = auto()
    CLOSED_LOOP = auto()
    FINAL = auto()
    DISARMED = auto()
    DONE = auto()


class TwisterNode(Node):

    def __init__(self, name, anonymous=False, disable_signals=False):
        super().__init__(name,
                         anonymous=anonymous,
                         disable_signals=disable_signals)
        self.data_lock = threading.RLock()
        self.start_angle = 0.0
        self.neutral_angle_deg = 0.0
        self.left_threshold = False
        self.twist_speed = 0.0
        self.twister_enabled = False
        self.twist_start_index = 0
        self.current_path_index = 0
        self.roll_angle_deg = 0.0
        self.index_threshold = 0
        self.twist_done = False
        self.twist_thrust = 0.0
        self.normal_thrust = 0.0
        self.twist_state = TwistState.ARMED
        self.roll_dir = 1
        self.open_loop_start_time = 0.0
        self.open_loop_duration = 0.5
        self.closed_loop_start_time = 0.0
        self.closed_loop_timeout = 3.0
        self.open_loop_angle_deg = 90
        self.lookahead_angle_deg = 45
        self.target_angle_deg = self.neutral_angle_deg
        self.open_loop_only = False

        # standard gains get overriden by px4 params
        self.standard_p_gain = 0.0
        self.standard_d_gain = 0.0
        self.twist_d_gain = 1.0
        self.twist_p_gain = 10.0

        self.rate = rospy.Rate(50)

        self.twister_dyn_server = Server(TwisterConfig,
                                         self.serve_twister_reconfigure)

        self.roll_angle_pub = rospy.Publisher("roll_angle",
                                              Float64,
                                              queue_size=1)

        self.thrust_pub = rospy.Publisher("thrust", Float64, queue_size=1)
        self.pose_sub = rospy.Subscriber("mavros/local_position/pose",
                                         PoseStamped,
                                         self.on_pose,
                                         queue_size=1)
        self.path_target_sub = rospy.Subscriber("path_follower/target",
                                                PathFollowerTarget,
                                                self.on_path_target,
                                                queue_size=1)

    def serve_twister_reconfigure(self, config, _):
        with self.data_lock:
            self.twister_enabled = config["enabled"]
            self.twist_start_index = config["twist_start_index"]
            self.twist_speed = config["twist_speed"]
            self.lookahead_angle_deg = 90 * self.twist_speed
            self.twist_thrust = config["twist_thrust"]
            self.normal_thrust = config["normal_thrust"]
            self.closed_loop_timeout = config["closed_loop_timeout"]
            self.open_loop_duration = config["open_loop_duration"]
            self.open_loop_angle_deg = config["open_loop_angle"]
            self.index_threshold = config["index_threshold"]
            self.open_loop_only = config["open_loop_only"]
        return config

    def on_pose(self, msg: PoseStamped):
        q = msg.pose.orientation
        roll = tf.transformations.euler_from_quaternion([q.x, q.y, q.z, q.w
                                                         ])[0] * 180 / math.pi
        with self.data_lock:
            self.roll_angle_deg = roll

    def on_path_target(self, msg: PathFollowerTarget):
        with self.data_lock:
            self.current_path_index = msg.target_index

    def run(self):

        while not rospy.is_shutdown():
            old_state = self.twist_state
            self.update_twist_state(rospy.get_time())
            if self.twist_state is not old_state:
                rospy.loginfo("State: %s", self.twist_state)
            self.rate.sleep()

    def wrap_pi_deg(self, v):
        return ((v + 180) % 360) - 180

    def update_twist_state(self, now):
        if self.twist_state is TwistState.ARMED:
            if self.twister_enabled and self.is_time_for_twist():
                self.twist_state = TwistState.OPEN_LOOP
                self.open_loop_start_time = now
                self.thrust_pub.publish(Float64(self.twist_thrust))
        elif self.twist_state is TwistState.OPEN_LOOP:
            if self.open_loop_done(now):
                self.twist_state = TwistState.CLOSED_LOOP
                self.closed_loop_start_time = now
            else:
                self.update_open_loop(now)
                self.roll_angle_pub.publish(
                    Float64(self.target_angle_deg / 180.0 * math.pi))
        elif self.twist_state is TwistState.CLOSED_LOOP:
            if self.closed_loop_done() or self.closed_loop_timed_out(now):
                self.twist_state = TwistState.DONE
                self.target_angle_deg = self.neutral_angle_deg
            else:
                self.update_closed_loop()
                self.roll_angle_pub.publish(
                    Float64(self.target_angle_deg / 180.0 * math.pi))
        elif self.twist_state is TwistState.DONE:
            self.thrust_pub.publish(Float64(self.normal_thrust))
            self.roll_angle_pub.publish(
                Float64(self.target_angle_deg / 180.0 * math.pi))
            self.roll_dir *= -1
            self.twist_state = TwistState.DISARMED
        elif self.twist_state is TwistState.DISARMED:
            if self.twist_start_index + self.index_threshold < self.current_path_index:
                self.twist_state = TwistState.ARMED

    def update_open_loop(self, now):
        t = min(now - self.open_loop_start_time, self.open_loop_duration)
        scaler = 2.0 * math.pi / (2.0 * self.open_loop_duration)
        self.target_angle_deg = self.roll_dir * self.wrap_pi_deg(
            (1 - math.cos(scaler * t)) *
            (self.open_loop_angle_deg + self.neutral_angle_deg) -
            self.neutral_angle_deg)
        self.roll_angle_pub.publish(
            Float64(self.target_angle_deg / 180.0 * math.pi))

    def update_closed_loop(self):
        self.target_angle_deg = self.wrap_pi_deg(self.roll_angle_deg +
                                                 self.roll_dir *
                                                 self.lookahead_angle_deg)
        self.roll_angle_pub.publish(
            Float64(self.target_angle_deg / 180.0 * math.pi))

    def open_loop_done(self, now):
        if now - self.open_loop_start_time > self.open_loop_duration:
            return True
        return False

    def closed_loop_done(self):
        if self.open_loop_only:
            return True
        in_final_half = (self.roll_dir * self.roll_angle_deg) < 0
        target_reached_neutral = (self.roll_dir * self.target_angle_deg) >= (
            self.neutral_angle_deg * self.roll_dir)
        return in_final_half and target_reached_neutral

    def closed_loop_timed_out(self, now):
        return (now - self.closed_loop_start_time) > self.closed_loop_timeout

    def is_time_for_twist(self):
        with self.data_lock:
            if self.twister_enabled and self.twist_state is TwistState.ARMED:
                tmp = self.index_threshold + self.twist_start_index
                return (tmp >= self.current_path_index >=
                        self.twist_start_index)
            return False


def main():
    n = TwisterNode("roll_controller")
    n.run()


if __name__ == "__main__":
    main()
