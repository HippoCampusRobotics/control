#!/usr/bin/env python

import rospy
from control.pid import PidNode
import multi_uuv
import hippolink
import hippolink_ros
from geometry_msgs.msg import PoseStamped
from hippocampus_msgs.msg import PathFollowerTarget, DistanceControlDebug
from path_planning.path_planning import Path
import threading
from std_msgs.msg import Float64
from std_srvs.srv import SetBool, SetBoolRequest, SetBoolResponse


class DistanceNode(PidNode):
    def __init__(self, name):
        super().__init__(name)

        self.path = Path()
        self.path.update_path_from_param_server()

        self.vehicle_number = multi_uuv.get_vehicle_number()
        self.target_vehicle = self.get_param("~target_vehicle",
                                             default=self.vehicle_number - 1)

        self.controller_enabled = True
        self.base_thrust = self.get_param("~default_base_thrust", 0.3)
        self.setpoint = self.get_param("~default_distance", 1.0)
        self.thrust_max = self.get_param("~thrust_max", 0.6)
        self.thrust_min = self.get_param("~thrust_min", 0.2)

        self.target_index = 0
        self.own_index = 0
        self.thrust = 0.0
        self.distance = 0.0

        self.pubs = self.init_pubs()

        self.subs = self.init_subs()

    def init_pubs(self):
        pubs = dict()
        pubs["thrust"] = rospy.Publisher("thrust", Float64, queue_size=1)
        pubs["distance_debug"] = rospy.Publisher("~distance_debug",
                                                 Float64,
                                                 queue_size=30)

        return pubs

    def init_subs(self):
        subs = dict()
        name = hippolink_ros.get_pose_name(self.target_vehicle)
        subs[name] = rospy.Subscriber(name, PoseStamped,
                                      self.on_target_vehicle_pose)
        name = hippolink_ros.get_path_target_name(self.target_vehicle)
        subs[name] = rospy.Subscriber(name, PathFollowerTarget,
                                      self.on_target_vehicle_target)
        name = "path_follower/target"
        subs[name] = rospy.Subscriber(name, PathFollowerTarget,
                                      self.on_own_target)
        name = "~base_thrust"
        subs[name] = rospy.Subscriber(name, Float64, self.on_base_thrust)
        return subs

    def serve_enable_controller(self, req: SetBoolRequest):
        with self.data_lock:
            self.controller_enabled = req.data
        return SetBoolResponse(success=True)

    def on_base_thrust(self, msg: Float64):
        with self.data_lock:
            self.base_thrust = min(1.0, max(0.0, msg.data))

    def on_target_vehicle_pose(self, msg: PoseStamped):
        pass

    def on_target_vehicle_target(self, msg: PathFollowerTarget):
        with self.data_lock:
            self.target_index = msg.target_index

    def on_own_target(self, msg: PathFollowerTarget):
        with self.data_lock:
            self.dist = self.path.get_distance_between_points(
                msg.target_index, self.target_index)
            if self.controller_enabled:
                err = self.dist - self.setpoint
                thrust = self.update_controller(err, rospy.get_time())
            else:
                thrust = 0
            self.thrust = min(max(thrust + self.base_thrust, self.thrust_min),
                              self.thrust_max)
        self.pubs["thrust"].publish(Float64(data=self.thrust))
        self.publish_distance_control_debug()

    def publish_distance_control_debug(self):
        with self.data_lock:
            msg = DistanceControlDebug(thrust_min=self.thrust_min,
                                       thrust_max=self.thrust_max,
                                       base_thrust=self.base_thrust,
                                       thrust=self.thrust,
                                       distance=self.distance,
                                       distance_setpoint=self.setpoint,
                                       leader_path_index=self.target_index,
                                       path_index=self.own_index)
        msg.header.stamp = rospy.Time.now()
        self.pubs["distance_debug"].publish(msg)


def main():
    node = DistanceNode("distance_controller")
    node.run()


if __name__ == "__main__":
    main()
